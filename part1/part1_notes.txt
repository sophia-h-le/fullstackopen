Part 1
React

Ways to define functions in JavaScript

JSX

JavaScript

Babel
-Transpile

Node.js

JS Bin

let vs var

functional programming

destructuring assignment

Ways to define objects in JavaScript
-object literals
-constructor functions

Functions
-function declarations
-function expressions

Object method
https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth

Classes
-prototypal inheritance
-https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript
-You Don't Know JS - book
-https://javascript.info/


Component state, Event handler
-component helper functions
-destructuring

-state hook

-types of events supported by each element

-object spread syntax

-conditional rendering


Debugging
-Keep the dev console open at all time
  -The Console tab should be open in most of the situations
-Keep both the code and the web page open at the same time, all the time
-Code a little, run, and fix errors immediately
  -Print-based debugging is a good idea
  -Separate what you want to log to the console with a comma
  -Pause the execution of your code with the debugger: 
    -type 'debugger' anywhere in your code in the console
    -the execution will stop once it reaches the debugger command
    -go to the console tab to inspect the current states of variables
    -once the bug is caught, and fixed, remove the 'debugger' command and refresh the page
   -Pause the execution of the code by setting break point in the Sources tab
    -inspect the values of variables in the Scope section
    -React developer tools extension will add Components tab

Rules of Hooks
The useState function, and useEffect function, must NOT be called from inside of a loop, a conditional expression, or any place that is NOT a function defining a component.
aka they can ONLY be called inside a function body that defines a React component

Event handler must always be a function or a reference to a function
